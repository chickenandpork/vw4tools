package org.smallfoot.vw4 ;

import javax.xml.XMLConstants;
import javax.xml.namespace.QName;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
//import javax.xml.xpath.XPathConstants;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/* The following is conditionally permitted based on the mutually-exclusive choice at ./configure time.  --with-json= chooses exactly one of the following, causing one of the following comment blocks pairs to be butchered */
/* *@DO_JSON_JAVA_TRUE@/	import org.json.*;				/*@DO_JSON_JAVA_TRUE@* */
/* *@DO_JSON_JACKSON_TRUE@/	import com.fasterxml.jackson.core.json.*;	/*@DO_JSON_JACKSON_TRUE@* */


/**
 * VirtualWisdom4ClientTool is a "Swiss Army Knife" of tools used when working with VirtualWisdom4.  The existence of these tools is not a judgement on VirtualWisdom4's proper Engineering; rather, an acceptance that a faster-response solution for the longer-tail of the normal curve is often helpful swapping QA delay for reduced customer friction.
 *
 * As you'd expect, there is no support for this.  If it breaks, you may choose to keep both pieces :)
 *
 * Ad-Hoc content for this utility-stack may appear at http://fcfae.com/
 */

public class VirtualWisdom4ClientTool
{
    private org.w3c.dom.Document xmlDocument;

    /**
     * Class Constructor to create with an initial file to load.
     *
     * @param xmlFile File to load at start
     *
     * @see #load(String)
     */
    public VirtualWisdom4ClientTool(String xmlFile)
    {
        load(xmlFile);
    }
	    
    /**
     * Class Constructor with no initial file.
     */
    public VirtualWisdom4ClientTool()
    {
    }

    /**
     * Open a file.
     *
     * This is actually a wrapper for the underlying file load
     *
     * @param filename file to load
     */
    protected void _load(String filename)
	throws java.lang.Exception
    {
	throw new java.lang.Exception ("unimplemented");
    }

    /**
     * Wrapper to just load the file, spitting out exceptions and stacks as they occur.
     *
     * @param filename file to load
     */
    public void load(String filename)
    {
	try
	{
	    _load (filename);
	}
	catch (java.lang.Exception e)
	{
            e.printStackTrace();
        }
    }

    /**
     * Save the current XML Document to a new file.
     *
     * @param filename filename to save into
     */
    protected void _save(String filename)
	throws java.lang.Exception
    {
	throw new java.lang.Exception ("unimplemented");
    }

    /**
     * Wrapper to just save the file, spitting out exceptions and stacks as they occur.
     *
     * @param filename filename to save into
     */
    public void save (String filename)
    {
	try
	{
	    _save (filename);
	}
	catch (java.lang.Exception e)
	{
            e.printStackTrace();
	}
    }
}
