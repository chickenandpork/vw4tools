#!awk -f
# 
# The "@" in the following documentation is markup for collectors
## @file
## 
## @page scripts Scripting Options
## @subpage csv-to-json
## 
## @page csv-to-json csv-to-json.awk: Convert a "OrderedTuples.csv" file to a JSON Entity import
## 
## @section Overview
## 
## This script (csv-to-json.awk) interprets a basic 4-column CSV into a JSON entities file.  This is "the old method", but facilitates hand-tweaking if required.  In essence, the four columns of the file are:
## 
## 1. host/array name
## 2. device type: "host" or "array" (without quotes)
## 3. WWPN
## 4. optional unique name of the WWPN within the (column 1) host
## 
## For example:
## 
## | name          | type  | WWPN                    | (optional) name |
## | ------------- | ----- | :---------------------: | :-------------- |
## | MPV123456-001 | host  | 2001001560123456        | MPV123456-001   |
## | MPV123456-013 | host  | 2013001560123456        | MPV123456-013   |
## | NetApp-123456 | array | 500a098598123456        |                 |
## | NetApp-123456 | array | 500a098698123456        |                 |
## | Oracle01      | host  | 10:00:00:00:c9:12:34:56 | Oracle01-A      |
## | Oracle01      | host  | 10:00:00:00:c9:12:34:57 | Oracle01-B      |
## 
## @section running Running this Script
## 
## This AWK script should work with gawk.exe from the UnxUtils project on
## sourceforge.net (which offers windows binaries without need of cygwin) and
## is regression-tested using basic awk on BSD-based operating systems.
## 
##     gawk.exe   -f csv-to-json.awk   OrderedTuples.csv   >   customer-name.json
## 
## @section cmdline Commandline Variables:
## 
## - -v SKIPARRAY={something} will avoid exporting the array which contains iomodules
## - -v SKIPHOST={something} will avoid exporting the host which contains hbas
## 
## @section Example Usage (2 switches)
## 
##     plink.exe -l username -pw pAssw0rd 192.168.1.44 'show device-alias database' > SW44.dad
##     plink.exe -l username -pw pAssw0rd 192.168.1.42 'zoneshow' > SW42.zoneshow
##     java.exe   -jar vw4tool.jar   -N SW44.dad   -N SW42.zoneshow   -oOrderedTuples.csv
## 
## (manual changes to the OrderedTuples.csv file)
## 
##     sort.exe OrderedTuples.csv    | gawk.exe   -f csv-to-json.awk   >  customer-name.json
## 
## If the user wants to avoid showing hosts in that output (but still produce HBAs):
## 
##     plink.exe -l username -pw pAssw0rd 192.168.1.44 'show device-alias database' > SW44.dad
##     plink.exe -l username -pw pAssw0rd 192.168.1.42 'zoneshow' > SW42.zoneshow
##     java.exe   -jar vw4tool.jar   -N SW44.dad   -N SW42.zoneshow   -oOrderedTuples.csv
##     sort.exe OrderedTuples.csv    | gawk.exe   -v SKIPHOST=gary.yuen   -f csv-to-json.awk   >  customer-name.json
## 
## It is assumed the user wants to make changes to OrderedTuples.csv before the final step; otherwise, the last two steps may be combined (which avoids this script):
## 
##     plink.exe -l username -pw pAssw0rd 192.168.1.44 'show device-alias database' > SW44.dad
##     plink.exe -l username -pw pAssw0rd 192.168.1.42 'zoneshow' > SW42.zoneshow
##     java.exe   -jar vw4tool.jar   -N SW44.dad   -N SW42.zoneshow   -ocustomer-name.json



BEGIN { ecount = 0; FS=","; HOLDNAME=""; HOLDTYPE=""; printf "{\n  \"version\" : 1,\n   \"entities\" : [\n"; }

func dumpAccum()
{
	if (0 < ecount) printf ",\n";

	if ("" != SKIPARRAY)
	    SKIP["array"] = "array";
	if ("" != SKIPHOST)
	    SKIP["host"] = "host";

	if (! SKIP[HOLDTYPE])		# for gary: if "SKIParray" is defined, and HOLDTYPE==array, skip showing that block
	{
	ecount++;
	printf "   {\n";
	printf "      \"name\" : \"%s\",\n",HOLDNAME;
	if ("array" == HOLDTYPE)
	    printf "      \"type\" : \"storagearray\",\n";
	else if ("host" == HOLDTYPE)
	    printf "      \"type\" : \"host\",\n";
	else
	    printf "      \"type\" : \"unknown\",\n";

	printf "      \"tags\" : [ \"csv2json Import\" ],\n";
	printf "      \"edit_type\" : \"add\",\n";
	printf "      \"child_entities\" : { \"add\" : [ ";

	cecount = 0;
	if ( ("host" == HOLDTYPE) || ("array" == HOLDTYPE) )
	  for (a in ACCUM)
	  {
		if (0 < cecount) printf ", ";
		if (ACCUM[a] == HOLDNAME) printf "\"%s-%02d\"", HOLDNAME, cecount;
		else printf "\"%s\"", ACCUM[a];
		cecount++;
	  };
	printf " ] }\n   }";
	}

	cecount = 0;
	if ( ("host" == HOLDTYPE) || ("array" == HOLDTYPE) )
	{
	  for (a in ACCUM)
	  {
	    if ( (0 < ecount) || (0 < cecount) ) printf ",\n";
	if (ACCUM[a] == HOLDNAME) printf "   {\n      \"name\" : \"%s-%02d\",\n",HOLDNAME, cecount;
	else printf "   {\n      \"name\" : \"%s\",\n", ACCUM[a];
	if ("host" == HOLDTYPE)
	  printf "      \"type\" : \"hba\",\n";
	else
	  printf "      \"type\" : \"iomodule\",\n";
	printf "      \"tags\" : [ \"csv2json Import\" ],\n";
	printf "      \"edit_type\" : \"add\",\n";
	printf "      \"child_entities\" : { \"add\" : [ \"%s\" ] }\n", a;
		cecount++;
	printf "   }";
	  }
	}


	HOLDNAME=$1;
	HOLDTYPE=$2;
	delete ACCUM;
	if ("" == $4) ACCUM[$3]=$1; else ACCUM[$3]=$4;
}

{ gsub ("\"", "", $1); gsub ("^ ", "", $1); gsub (" $", "", $1); }
{ gsub ("\"", "", $2); gsub ("^ ", "", $2); gsub (" $", "", $2); }
{ gsub ("\"", "", $3); gsub ("^ ", "", $3); gsub (" $", "", $3); }
{ gsub ("\"", "", $4); gsub ("^ ", "", $4); gsub (" $", "", $4); }

(("" == HOLDNAME) && ("" == HOLDTYPE)) { HOLDNAME=$1; HOLDTYPE=$2; }
(($1 == HOLDNAME) && ($2 == HOLDTYPE)) { if ("" == $4) ACCUM[$3]=$1; else ACCUM[$3]=$4; next; }

{ dumpAccum() }

END { dumpAccum(); printf "\n]\n}\n"; }

